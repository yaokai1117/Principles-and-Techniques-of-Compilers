P4

1.编译运行
	使用脚本run.sh自动编译运行

	$ bin/run.sh

	注意：在测试缺少运算符的错误时，由于我用来捕获错误的产生式中用到了error这个token，所以遇到缺少运算符的错误固定会打印一个syntax error，不会影响分析，请无视它。


2.完成情况
	* 可分析正确的C1语言程序并打印出产生式
	* 目前可以识别的错误有
		常量定义中缺少int，报warning
		表达式中缺少左右括号，报error
		表达式缺运算符，报error
		语句缺少分号，报error
	* 采用Clang的报错风格，输出出错的那行代码并用^指出出错位置，并且对于tab和空格的缩进情况做了处理（全部转为空格），使^标出的错误位置正确。
	* 完成过程中遇到的冲突通过设优先级的方法消去，目前分析器不会产生冲突，在文档中说明了消去冲突的过程


3.提交内容

	config/ 	包含flex和bison源文件
		parser.y
		lexer.l

	src/ 		源文件
		msgfactory.cpp 	处理编译过程中信息，尝试使用了工厂模式
		main.cpp 		主程序
		global.cpp 		一些全局变量
		util.cpp 		一些输入输出的功能 （参考的助教的代码）

	include/ 	头文件

	doc/ 		问题回答和设计文档
		设计文档.md
		问题回答.md

	test/ 		6个测试文件，作用见下文

	bin/ 		编译运行的脚本
		run.sh


4.测试文件的说明
	test1.c, test2.c, test3.c用来测试打印正确C1语言程序的产生式的功能
		test1.c 	主要是一些声明语句
		test2.c 	包含if，while，函数声明和调用
		test3.c 	一个冒泡排序的程序

	error1.c, error2.c, error3.c用来测试错误识别和恢复
		error1.c 	分别测试几种不同的错误
		error2.c 	一个语句出现多个错误的情况，如 “a = 1 + 3) 3”, 同时缺少左括号，运算符，分号
		error3.c 	一个加了一些错误的冒泡排序程序


5.参考
	* bison和flex的manual
	* 助教和张老师的示例代码

========
Author: Yao Kai  ( yaokai@mail.ustc.edu.cn )
