## 扩展while循环
----------

扩展while循环主要分两步，生成AST，和实现Codegen。

### 1.生成AST

首先阅读源代码中if语句，for语句等相关的代码。在ast.h中添加WhileExprAST的定义，并在toy.cpp的词法分析部分添加对tok_while的识别。然后完成ParseWhileExpr的代码，使词法分析器能够识别while语句并返回相应的AST。最后在dumpdot.cpp中实现WhileExprAST的dumpdot方法，使得程序能将AST转化为DOT图。

### 2.实现Codegen

实现逻辑是这样的：
    
    entry：
        goto cond
        
    cond：
        a = cond_expr.codegen()
        i = cmp(a,0)
        if (i == 0) 
            goto body 
        else
            goto end
            
    body :
        body_expr.codegen()
        goto cond
        
    end :
        return 0.0
        
实现过程中遇到的问题主要是，如果生成的代码在某种情况下无法返回一个值，就会在FPM的optimization环节陷入死循环，去除optimization则会发生runtime错误，因此必须保证生成的代码在各种情况下都一定能够return。此外，返回的值类型不是浮点数也会出现bug，因此需要调用llvm的Constant::getNullValue来返回正确的值。

调试过程中关闭llvm的优化（即注释掉TheFPM->run(*TheFunction);）会比较方便，可以看到完全按自己所写的代码产生的中间码，便于找到问题。
        
        
        
        
        